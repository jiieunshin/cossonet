cat('tp :', round(mean(en3_tp, na.rm = TRUE), 4), "(", round(sd(en3_tp, na.rm = TRUE)/sqrt(sum(!is.na(en3_tp))), 4), ")", "\n")
cat('fp :', round(mean(en3_fp, na.rm = TRUE), 4), "(", round(sd(en3_fp, na.rm = TRUE)/sqrt(sum(!is.na(en3_fp))), 4), ")", "\n")
cat('precis :', round(mean(en3_pre, na.rm = TRUE), 4), "(", round(sd(en3_pre, na.rm = TRUE)/sqrt(sum(!is.na(en3_pre))), 4), ")", "\n")
cat('reccall:', round(mean(en3_rec, na.rm = TRUE), 4), "(", round(sd(en3_rec, na.rm = TRUE)/sqrt(sum(!is.na(en3_rec))), 4), ")", "\n")
cat('f1     :', round(mean(en3_f1, na.rm = TRUE), 4), "(", round(sd(en3_f1, na.rm = TRUE)/sqrt(sum(!is.na(en3_f1))), 4), ")", "\n")
cat('miss   :', round(mean(en3_miss, na.rm = TRUE), 4), "(", round(sd(en3_miss, na.rm = TRUE)/sqrt(sum(!is.na(en3_miss))), 4), ")", "\n")
# cat('time   :', round(mean(time3, na.rm = TRUE), 4), "(", round(sd(time3, na.rm = TRUE)/sqrt(sum(!is.na(time3))), 4), ")", "\n")
cat('gamma=0.95 \n')
cat("length :", sum(!is.na(en1_miss)), "\n")
cat("time :", round(mean(en1_time, na.rm = TRUE), 4), "(", round(sd(en1_time, na.rm = TRUE)/sqrt(sum(!is.na(en1_time))), 4), ")", "\n")
cat('varsel :', colSums(en1_signal_varsel), mean(en1_varsel, na.rm = TRUE) ,"(", round(sd(en1_varsel, na.rm = TRUE)/sqrt(iter), 4), ")", "\n")
cat('tp :', round(mean(en1_tp, na.rm = TRUE), 4), "(", round(sd(en1_tp, na.rm = TRUE)/sqrt(sum(!is.na(en1_tp))), 4), ")", "\n")
cat('fp :', round(mean(en1_fp, na.rm = TRUE), 4), "(", round(sd(en1_fp, na.rm = TRUE)/sqrt(sum(!is.na(en1_fp))), 4), ")", "\n")
cat('precis :', round(mean(en1_pre, na.rm = TRUE), 4), "(", round(sd(en1_pre, na.rm = TRUE)/sqrt(sum(!is.na(en1_pre))), 4), ")", "\n")
cat('reccall:', round(mean(en1_rec, na.rm = TRUE), 4), "(", round(sd(en1_rec, na.rm = TRUE)/sqrt(sum(!is.na(en1_rec))), 4), ")", "\n")
cat('f1     :', round(mean(en1_f1, na.rm = TRUE), 4), "(", round(sd(en1_f1, na.rm = TRUE)/sqrt(sum(!is.na(en1_f1))), 4), ")", "\n")
cat('miss   :', round(mean(en1_miss, na.rm = TRUE), 4), "(", round(sd(en1_miss, na.rm = TRUE)/sqrt(sum(!is.na(en1_miss))), 4), ")", "\n")
# cat('time   :', round(mean(time10, na.rm = TRUE), 4), "(", round(sd(time10, na.rm = TRUE)/sqrt(sum(!is.na(time10))), 4), ")", "\n")
}
}
}
out
#' The function data_generation generates an example dataset for applying the cossonet function.
#'
#' @param n observation size.
#' @param p dimension.
#' @param rho a positive integer indicating the correlation strength for the first four informative variables.
#' @param SNR signal-to-noise ratio.
#' @param response the type of the response variable.
#' @param interaction the type of the effect, main or two-way interaction.
#'
#' @return a list of explanatory variables, response variables, and true functions.
#'
#' @examples
#' # Generate example data
#' set.seed(20250101)
#' tr = data_generation(n = 200, p = 20, SNR = 9, response = "continuous")
#' tr_x = tr$x
#' tr_y = tr$y
#'
#' te = data_generation(n = 1000, p = 20, SNR = 9, response = "continuous")
#' te_x = te$x
#' te_y = te$y
#'
#' @export
#'
data_generation = function(n, p, rho, SNR,
response = c("continuous", "binary", "count", "survival"),
interaction = TRUE){
if(response == "binary"){
f1 = function(t) 3 * t
f2 = function(t) pi * sin(pi * t) * 2
f3 = function(t) 8 * t^3
f4 = function(t) 4/ (exp(1) - 1) * exp(t)
} else{
f1 = function(t) t
f2 = function(t) (2 * t - 1)^2
f3 = function(t) sin(2 * pi * t) / (2 - sin(2 * pi * t))
f4 = function(t) 0.1*sin(2 * pi * t) + 0.2*cos(2 * pi * t) + 0.3*sin(2 * pi * t)^2 + 0.4*cos(2 * pi * t)^3 + 0.5*sin(2 * pi * t)^3
f5 = function(t) sin(2 * pi * t) / (2 - sin(2 * pi * t)) + .5
f6 = function(t) 0.1*sin(2 * pi * t) + 0.2*cos(2 * pi * t) + 0.3*sin(2 * pi * t)^2 + 0.4*cos(2 * pi * t)^3 + 0.5*sin(2 * pi * t)^3 + .5
}
if(missing(response))
type = "continuous"
response = match.arg(response)
if(missing(n)) n = 200
if(missing(p)) p = 10
if(missing(rho)) rho = 0.8
if(missing(SNR)) SNR = 8
if(p <= 4) stop("dimension size should be larger than 4.")
t = 2
pp = ifelse(interaction, 3, 4)
x = matrix(0, n, pp)
W = matrix(runif(n * pp), n, pp)
U = runif(n)
for(j in 1:pp){
x[, j] = (W[, j] + t * U)/(1 + t)
}
# Set the outer margins
# par(oma = c(0, 0, 0, 0))
# Set the inner margin
# par(mar = c(4, 4, 3, 1))
# par(mfrow = c(1,4))
# curve(f1, 0, 1)
# curve(f2, 0, 1)
# curve(f3, 0, 1)
# curve(f4, 0, 1)
# par(mfrow = c(1,1))
if(response == "continuous"){
if(!interaction){
V_sig = var(1 * f1(x[,1])) + var(1 * f2(x[,2])) + var(2 * f3(x[,3])) + var(3 * f4(x[,4]))
sd = sqrt(V_sig / SNR)
f = 1 * f1(x[,1]) + 1 * f2(x[,2]) + 2 * f3(x[,3]) + 3 * f4(x[,4]) + rnorm(n, 0, sd)
x_nois = matrix(runif(n * (p-pp), 0, 1), n, (p-pp))
x = cbind(x, x_nois)
out = list(x = x, f = f, y = f)
}
else{
w = c(1.2, 1.7, -1.4, 1.5, 0.2, 0.4)
h = cbind(x[, 1], x[, 2],  x[, 3], x[, 1] * x[, 2], x[, 1] * x[, 3], x[, 2] * x[, 3])
sd = var(1.2 * x[, 1]) + var(1.5 * x[, 2]) + var(1.6 * x[, 3]) + var(1.3 * x[, 1] * x[, 2]) + var(1.4 * x[, 1] * x[, 3]) + var(1.8 * x[, 2] * x[, 3])
print(sd)
f = h %*% w + rnorm(n, 0, sd)
x_nois = matrix(runif(n * (p-pp), 0, 1), n, (p-pp))
x = cbind(x, x_nois)
out = list(x = x, f = f, y = f)
}
}
if(response == "binary"){
if(!interaction){
V_sig = var(1 * f1(x[,1])) + var(1 * f2(x[,2])) + var(f3(x[,3])) + var(f4(x[,4]))
sd = sqrt(V_sig / SNR)
f = 1 * f1(x[,1]) + f2(x[,2]) + f3(x[,3]) + f4(x[,4]) - 11 + rnorm(n, 0, sd)
x_nois = matrix(runif(n * (p-4), 0, 1), n, (p-4))
x = cbind(x, x_nois)
prob = exp(f)/(exp(f) + 1)
y = rbinom(n, 1, prob)
out = list(x = x, f = f, y = y)
}
else{
V_sig = var(f1(x[,1])) + var(f2(x[,2])) + var(1 * f3(x[,3])) + var(1 * f4(x[,4])) +
var(2 * f1(x[, 1]) * f3(x[, 3])) + var(2 * f2(x[, 2]) * f3(x[, 3])) + var(1 *  f1(x[, 1]) * f4(x[, 4]))
sd = sqrt(V_sig / SNR)
# f = f1(x[,1]) + f2(x[,2]) + f3(x[,3]) + f4(x[,4]) +
#   3 * f1(x[, 1]) * f2(x[, 2]) + 4 * f2(x[, 2]) * f4(x[, 4]) + 5 * f3(x[, 3]) * f4(x[, 4]) - 130 + rnorm(n, 0, sd)
# f = f1(x[,1]) + f2(x[,2]) + 1 * f3(x[,3]) + 1 * f4(x[,4]) +
#   1 * f1(x[, 1]) * f2(x[, 2]) + 3 * f2(x[, 2]) * f4(x[, 4]) + 6 * f3(x[, 3]) * f4(x[, 4]) +
#  2 * f1(x[, 1]) * f3(x[, 3]) + 4 * f2(x[, 2]) * f3(x[, 3]) + 5 * f1(x[, 1]) * f4(x[, 4]) + rnorm(n, 0, sd)
w1 = c(2.1, 1.4, -1.2, 2.1, 1.0, 2.4)
w2 = c(-1.1, 2.4, 1.5, 3.4, 2.5, 0.7)
h = cbind(x[, 1], x[, 2],  x[, 3], x[, 1] * x[, 2], x[, 1] * x[, 3], x[, 2] * x[, 3])
o1 = 1/(1 + exp(-h %*% w1))
o2 = 1/(1 + exp(-h %*% w2))
x_nois = matrix(runif(n * (p-pp), 0, 1), n, (p-pp))
x = cbind(x, x_nois)
prob = exp(f)/(exp(f) + 1)
y = pmax(o1, o2)
out = list(x = x, f = f, y = y)
}
# V_sig = var(f1(x[,1])) + var(f2(x[,2])) + var(f3(x[,3])) + var(f4(x[,4]))
# sd = sqrt(V_sig / SNR)
# f = f1(x[,1]) + f2(x[,2]) + f3(x[,3]) + f4(x[,4]) - 11 + rnorm(n, 0, sd)
}
if(response == "count"){
if(!interaction){
V_sig = var(1 * f1(x[,1])) + var(1 * f2(x[,2])) + var(2 * f3(x[,3])) + var(3 * f4(x[,4]))
sd = sqrt(V_sig / SNR)
f = 1 * f1(x[,1]) + 1 * f2(x[,2]) + 2 * f3(x[,3]) + 3 * f4(x[,4]) + rnorm(n, 0, sd)
f = f / 3
mu = exp(f)
y = rpois(n, mu)
x_nois = matrix(runif(n * (p-pp), 0, 1), n, (p-pp))
x = cbind(x, x_nois)
out = list(x = x, f = f, y = y)
}
else{
V_sig = var(f2(x[,1])) + var(f3(x[,2])) + var(f4(x[,3])) +
var(0.5 *  f2(x[, 1] * x[, 2]) ) + var(.1 * f2(x[, 1] * x[, 3])) + var(.2 * f3(x[, 2] * x[, 3]))
sd = sqrt(V_sig / SNR)
f = 2 * x[, 2]^2 - .4 * exp(x[, 3]) + 1 * x[, 1] -
.9 * f2(x[, 1] * x[, 2]) - 1 * f5(x[, 1] * x[, 3]) + .6 * f6(x[, 2] * x[, 3]) + 3
# f = 2.2 * x[, 2]^2 - 2 * exp(x[, 3]) + 3.6 * x[, 1] -
#   1.8 * f2(x[, 1] * x[, 2]) - 1.5 * f3(x[, 1] * x[, 3]) + 1.5 * f4(x[, 2] * x[, 3]) + 4
# f = 1.5 * x[, 2]^2 - 1.5 * exp(x[, 3]) + 2.2 * x[, 1] -
#   1.2 * f2(x[, 1] * x[, 2]) - 2 * f5(x[, 1] * x[, 3]) + 2 * f6(x[, 2] * x[, 3]) + 5
# f = 1.2 * x[, 2]^2 - 1.1 * exp(x[, 3]) + 3 * x[, 1] -
#   1 * f2(x[, 1] * x[, 2]) - 2 * f5(x[, 1] * x[, 3]) + 2 * f6(x[, 2] * x[, 3]) + 4
# f = 2 * x[, 2]^2 - 2 * exp(x[, 3]) + 2.2 * x[, 1] +
#  2 * f2(x[, 1] * x[, 2]) - 1 * f5(x[, 1] * x[, 3]) + 1.2 * f6(x[, 2] * x[, 3]) + 4
#   f = 2.2 * x[, 2]^2 - 2.5 * exp(x[, 3]) + 2.2 * x[, 1] -
# 1 * f2(x[, 1] * x[, 2]) + .8 * f5(x[, 1] * x[, 3]) + .5 * f6(x[, 2] * x[, 3]) + 4  ## 주효과 선택
# f = 2 * x[, 2]^2 + .1 * exp(x[, 3]) + 1.5 * x[, 1] -
#   1.1 * f2(x[, 1] * x[, 2]) + 1 * f5(x[, 1] * x[, 3]) + .5 * f6(x[, 2] * x[, 3])
plot(f)
mu = exp(f/2)
y = rpois(n, mu)
x_nois = matrix(runif(n * (p-pp), 0, 1), n, (p-pp))
x = cbind(x, x_nois)
out = list(x = x, f = f, y = y)
}
# V_sig = var(1 * f1(x[,1])) + var(1 * f2(x[,2])) + var(2 * f5(x[,3])) + var(3 * f6(x[,4]))
# sd = sqrt(V_sig / SNR)
# f = 1 * f1(x[,1]) + 1 * f2(x[,2]) + 2 * f5(x[,3]) + 3 * f6(x[,4]) + rnorm(n, 0, sd)
# # print(sd)
# x_nois = matrix(runif(n * (p-pp), 0, 1), n, (p-pp))
# x = cbind(x, x_nois)
#
# f = f / 3
# mu = exp(f)
# y = rpois(n, mu)
#
# out = list(x = x, f = f, y = y)
}
if(response == 'survival'){
V_sig = var(1 * f1(x[,1])) + var(1 * f2(x[,2])) + var(2 * f3(x[,3])) + var(3 * f4(x[,4]))
sd = sqrt(V_sig / SNR)
f = 1 * f1(x[,1]) + 1 * f2(x[,2]) + 2 * f3(x[,3]) + 3 * f4(x[,4]) + rnorm(n, 0, sd)
x_nois = matrix(runif(n * (p - pp), 0, 1), n, (p - pp))
x = cbind(x, x_nois)
surTime = rexp(n, exp(f))
cenTime = rexp(n, exp(-f) * runif(1, 4, 6))
y = cbind(time = apply(cbind(surTime, cenTime), 1, min), status = 1 * (surTime < cenTime))
out = list(x = x, f = f, y = y)
}
return(out)
}
tr = data_generation(n, p, SNR = 9, response = "count", interaction = TRUE)
tr_x = tr$x
tr_y = tr$y
#' The function data_generation generates an example dataset for applying the cossonet function.
#'
#' @param n observation size.
#' @param p dimension.
#' @param rho a positive integer indicating the correlation strength for the first four informative variables.
#' @param SNR signal-to-noise ratio.
#' @param response the type of the response variable.
#' @param interaction the type of the effect, main or two-way interaction.
#'
#' @return a list of explanatory variables, response variables, and true functions.
#'
#' @examples
#' # Generate example data
#' set.seed(20250101)
#' tr = data_generation(n = 200, p = 20, SNR = 9, response = "continuous")
#' tr_x = tr$x
#' tr_y = tr$y
#'
#' te = data_generation(n = 1000, p = 20, SNR = 9, response = "continuous")
#' te_x = te$x
#' te_y = te$y
#'
#' @export
#'
data_generation = function(n, p, rho, SNR,
response = c("continuous", "binary", "count", "survival"),
interaction = TRUE){
if(response == "binary"){
f1 = function(t) 3 * t
f2 = function(t) pi * sin(pi * t) * 2
f3 = function(t) 8 * t^3
f4 = function(t) 4/ (exp(1) - 1) * exp(t)
} else{
f1 = function(t) t
f2 = function(t) (2 * t - 1)^2
f3 = function(t) sin(2 * pi * t) / (2 - sin(2 * pi * t))
f4 = function(t) 0.1*sin(2 * pi * t) + 0.2*cos(2 * pi * t) + 0.3*sin(2 * pi * t)^2 + 0.4*cos(2 * pi * t)^3 + 0.5*sin(2 * pi * t)^3
f5 = function(t) sin(2 * pi * t) / (2 - sin(2 * pi * t)) + .5
f6 = function(t) 0.1*sin(2 * pi * t) + 0.2*cos(2 * pi * t) + 0.3*sin(2 * pi * t)^2 + 0.4*cos(2 * pi * t)^3 + 0.5*sin(2 * pi * t)^3 + .5
}
if(missing(response))
type = "continuous"
response = match.arg(response)
if(missing(n)) n = 200
if(missing(p)) p = 10
if(missing(rho)) rho = 0.8
if(missing(SNR)) SNR = 8
if(p <= 4) stop("dimension size should be larger than 4.")
t = 2
pp = ifelse(interaction, 3, 4)
x = matrix(0, n, pp)
W = matrix(runif(n * pp), n, pp)
U = runif(n)
for(j in 1:pp){
x[, j] = (W[, j] + t * U)/(1 + t)
}
# Set the outer margins
# par(oma = c(0, 0, 0, 0))
# Set the inner margin
# par(mar = c(4, 4, 3, 1))
# par(mfrow = c(1,4))
# curve(f1, 0, 1)
# curve(f2, 0, 1)
# curve(f3, 0, 1)
# curve(f4, 0, 1)
# par(mfrow = c(1,1))
if(response == "continuous"){
if(!interaction){
V_sig = var(1 * f1(x[,1])) + var(1 * f2(x[,2])) + var(2 * f3(x[,3])) + var(3 * f4(x[,4]))
sd = sqrt(V_sig / SNR)
f = 1 * f1(x[,1]) + 1 * f2(x[,2]) + 2 * f3(x[,3]) + 3 * f4(x[,4]) + rnorm(n, 0, sd)
x_nois = matrix(runif(n * (p-pp), 0, 1), n, (p-pp))
x = cbind(x, x_nois)
out = list(x = x, f = f, y = f)
}
else{
w = c(1.2, 1.7, -1.4, 1.5, 0.2, 0.4)
h = cbind(x[, 1], x[, 2],  x[, 3], x[, 1] * x[, 2], x[, 1] * x[, 3], x[, 2] * x[, 3])
sd = var(1.2 * x[, 1]) + var(1.5 * x[, 2]) + var(1.6 * x[, 3]) + var(1.3 * x[, 1] * x[, 2]) + var(1.4 * x[, 1] * x[, 3]) + var(1.8 * x[, 2] * x[, 3])
print(sd)
f = h %*% w + rnorm(n, 0, sd)
x_nois = matrix(runif(n * (p-pp), 0, 1), n, (p-pp))
x = cbind(x, x_nois)
out = list(x = x, f = f, y = f)
}
}
if(response == "binary"){
if(!interaction){
V_sig = var(1 * f1(x[,1])) + var(1 * f2(x[,2])) + var(f3(x[,3])) + var(f4(x[,4]))
sd = sqrt(V_sig / SNR)
f = 1 * f1(x[,1]) + f2(x[,2]) + f3(x[,3]) + f4(x[,4]) - 11 + rnorm(n, 0, sd)
x_nois = matrix(runif(n * (p-4), 0, 1), n, (p-4))
x = cbind(x, x_nois)
prob = exp(f)/(exp(f) + 1)
y = rbinom(n, 1, prob)
out = list(x = x, f = f, y = y)
}
else{
V_sig = var(f1(x[,1])) + var(f2(x[,2])) + var(1 * f3(x[,3])) + var(1 * f4(x[,4])) +
var(2 * f1(x[, 1]) * f3(x[, 3])) + var(2 * f2(x[, 2]) * f3(x[, 3])) + var(1 *  f1(x[, 1]) * f4(x[, 4]))
sd = sqrt(V_sig / SNR)
# f = f1(x[,1]) + f2(x[,2]) + f3(x[,3]) + f4(x[,4]) +
#   3 * f1(x[, 1]) * f2(x[, 2]) + 4 * f2(x[, 2]) * f4(x[, 4]) + 5 * f3(x[, 3]) * f4(x[, 4]) - 130 + rnorm(n, 0, sd)
# f = f1(x[,1]) + f2(x[,2]) + 1 * f3(x[,3]) + 1 * f4(x[,4]) +
#   1 * f1(x[, 1]) * f2(x[, 2]) + 3 * f2(x[, 2]) * f4(x[, 4]) + 6 * f3(x[, 3]) * f4(x[, 4]) +
#  2 * f1(x[, 1]) * f3(x[, 3]) + 4 * f2(x[, 2]) * f3(x[, 3]) + 5 * f1(x[, 1]) * f4(x[, 4]) + rnorm(n, 0, sd)
w1 = c(2.1, 1.4, -1.2, 2.1, 1.0, 2.4)
w2 = c(-1.1, 2.4, 1.5, 3.4, 2.5, 0.7)
h = cbind(x[, 1], x[, 2],  x[, 3], x[, 1] * x[, 2], x[, 1] * x[, 3], x[, 2] * x[, 3])
o1 = 1/(1 + exp(-h %*% w1))
o2 = 1/(1 + exp(-h %*% w2))
x_nois = matrix(runif(n * (p-pp), 0, 1), n, (p-pp))
x = cbind(x, x_nois)
prob = exp(f)/(exp(f) + 1)
y = pmax(o1, o2)
out = list(x = x, f = f, y = y)
}
# V_sig = var(f1(x[,1])) + var(f2(x[,2])) + var(f3(x[,3])) + var(f4(x[,4]))
# sd = sqrt(V_sig / SNR)
# f = f1(x[,1]) + f2(x[,2]) + f3(x[,3]) + f4(x[,4]) - 11 + rnorm(n, 0, sd)
}
if(response == "count"){
if(!interaction){
V_sig = var(1 * f1(x[,1])) + var(1 * f2(x[,2])) + var(2 * f3(x[,3])) + var(3 * f4(x[,4]))
sd = sqrt(V_sig / SNR)
f = 1 * f1(x[,1]) + 1 * f2(x[,2]) + 2 * f3(x[,3]) + 3 * f4(x[,4]) + rnorm(n, 0, sd)
f = f / 3
mu = exp(f)
y = rpois(n, mu)
x_nois = matrix(runif(n * (p-pp), 0, 1), n, (p-pp))
x = cbind(x, x_nois)
out = list(x = x, f = f, y = y)
}
else{
V_sig = var(f2(x[,1])) + var(f3(x[,2])) + var(f4(x[,3])) +
var(0.5 *  f2(x[, 1] * x[, 2]) ) + var(.1 * f2(x[, 1] * x[, 3])) + var(.2 * f3(x[, 2] * x[, 3]))
sd = sqrt(V_sig / SNR)
f = 1.8 * x[, 2]^2 - .4 * exp(x[, 3]) + .9 * x[, 1] -
.9 * f2(x[, 1] * x[, 2]) - .9 * f5(x[, 1] * x[, 3]) + .6 * f6(x[, 2] * x[, 3]) + 3
# f = 2.2 * x[, 2]^2 - 2 * exp(x[, 3]) + 3.6 * x[, 1] -
#   1.8 * f2(x[, 1] * x[, 2]) - 1.5 * f3(x[, 1] * x[, 3]) + 1.5 * f4(x[, 2] * x[, 3]) + 4
# f = 1.5 * x[, 2]^2 - 1.5 * exp(x[, 3]) + 2.2 * x[, 1] -
#   1.2 * f2(x[, 1] * x[, 2]) - 2 * f5(x[, 1] * x[, 3]) + 2 * f6(x[, 2] * x[, 3]) + 5
# f = 1.2 * x[, 2]^2 - 1.1 * exp(x[, 3]) + 3 * x[, 1] -
#   1 * f2(x[, 1] * x[, 2]) - 2 * f5(x[, 1] * x[, 3]) + 2 * f6(x[, 2] * x[, 3]) + 4
# f = 2 * x[, 2]^2 - 2 * exp(x[, 3]) + 2.2 * x[, 1] +
#  2 * f2(x[, 1] * x[, 2]) - 1 * f5(x[, 1] * x[, 3]) + 1.2 * f6(x[, 2] * x[, 3]) + 4
#   f = 2.2 * x[, 2]^2 - 2.5 * exp(x[, 3]) + 2.2 * x[, 1] -
# 1 * f2(x[, 1] * x[, 2]) + .8 * f5(x[, 1] * x[, 3]) + .5 * f6(x[, 2] * x[, 3]) + 4  ## 주효과 선택
# f = 2 * x[, 2]^2 + .1 * exp(x[, 3]) + 1.5 * x[, 1] -
#   1.1 * f2(x[, 1] * x[, 2]) + 1 * f5(x[, 1] * x[, 3]) + .5 * f6(x[, 2] * x[, 3])
plot(f)
mu = exp(f/2)
y = rpois(n, mu)
x_nois = matrix(runif(n * (p-pp), 0, 1), n, (p-pp))
x = cbind(x, x_nois)
out = list(x = x, f = f, y = y)
}
# V_sig = var(1 * f1(x[,1])) + var(1 * f2(x[,2])) + var(2 * f5(x[,3])) + var(3 * f6(x[,4]))
# sd = sqrt(V_sig / SNR)
# f = 1 * f1(x[,1]) + 1 * f2(x[,2]) + 2 * f5(x[,3]) + 3 * f6(x[,4]) + rnorm(n, 0, sd)
# # print(sd)
# x_nois = matrix(runif(n * (p-pp), 0, 1), n, (p-pp))
# x = cbind(x, x_nois)
#
# f = f / 3
# mu = exp(f)
# y = rpois(n, mu)
#
# out = list(x = x, f = f, y = y)
}
if(response == 'survival'){
V_sig = var(1 * f1(x[,1])) + var(1 * f2(x[,2])) + var(2 * f3(x[,3])) + var(3 * f4(x[,4]))
sd = sqrt(V_sig / SNR)
f = 1 * f1(x[,1]) + 1 * f2(x[,2]) + 2 * f3(x[,3]) + 3 * f4(x[,4]) + rnorm(n, 0, sd)
x_nois = matrix(runif(n * (p - pp), 0, 1), n, (p - pp))
x = cbind(x, x_nois)
surTime = rexp(n, exp(f))
cenTime = rexp(n, exp(-f) * runif(1, 4, 6))
y = cbind(time = apply(cbind(surTime, cenTime), 1, min), status = 1 * (surTime < cenTime))
out = list(x = x, f = f, y = y)
}
return(out)
}
tr = data_generation(n, p, SNR = 9, response = "count", interaction = TRUE)
tr_x = tr$x
tr_y = tr$y
t2 = system.time({
fit10 = try(cossonet(tr_x, tr_y, family = 'poisson', gamma = 0.95, kernel = "spline",
effect = "interaction", scale = T,
lambda0 = lambda0_input,
lambda_theta = lambda_theta_input
), silent = TRUE)
})[3]
fit10$theta_step$theta.new[c(1:3, sel_2int)]
fit10$theta_step$theta.ne
lambda0_input = exp(seq(log(2^{-3}), log(2^{-1}), length.out = 20))
lambda_theta_input = exp(seq(log(2^{-6}), log(2^{-2}), length.out = 20))
en3_signal_varsel = en1_signal_varsel = matrix(0, iter, p_sig + 3)
time3 = time10 = c()
en3_varsel = en1_varsel = c()
en3_tp = en3_fp = en1_tp = en1_fp = en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
tr = data_generation(n, p, SNR = 9, response = "count", interaction = TRUE)
tr_x = tr$x
tr_y = tr$y
t2 = system.time({
fit10 = try(cossonet(tr_x, tr_y, family = 'poisson', gamma = 0.95, kernel = "spline",
effect = "interaction", scale = T,
lambda0 = lambda0_input,
lambda_theta = lambda_theta_input
), silent = TRUE)
})[3]
fit10$theta_step$theta.new[c(1:3, sel_2int)]
fit10$theta_step$theta.ne
lambda_theta_input = exp(seq(log(2^{-6}), log(2^{-4}), length.out = 20))
t2 = system.time({
fit10 = try(cossonet(tr_x, tr_y, family = 'poisson', gamma = 0.95, kernel = "spline",
effect = "interaction", scale = T,
lambda0 = lambda0_input,
lambda_theta = lambda_theta_input
), silent = TRUE)
})[3]
fit10$theta_step$theta.new[c(1:3, sel_2int)]
fit10$theta_step$theta.ne
en3_signal_varsel = en1_signal_varsel = matrix(0, iter, p_sig + 3)
time3 = time10 = c()
en3_varsel = en1_varsel = c()
en3_tp = en3_fp = en1_tp = en1_fp = en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
# cat("----------------- \n")
for(i in 1:iter){
cat("\n iteration :", i, "\n")
set.seed(i)
tr = data_generation(n, p, SNR = 9, response = "count", interaction = TRUE)
tr_x = tr$x
tr_y = tr$y
te = data_generation(te_n, p, SNR = 9, response = "count", interaction = TRUE)
te_x = te$x
te_y = te$y
t1 = system.time({
fit3 = try(cossonet(tr_x, tr_y, family = 'poisson', gamma = 1, kernel = "spline",
effect = "interaction", scale = T,
lambda0 = lambda0_input,
lambda_theta = lambda_theta_input
), silent = TRUE)
})[3]  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
if(!(class(fit3) == 'try-error')){
d = length(fit3$theta_step$theta.new)
# true_var = c(rep(1, p_sig2, rep(0, d-p_sig2)))
true_var = rep(0,  sum(sapply(fit3$data$coord, length)))
true_var[1:p_sig] = 1
sel_2int = which(fit3$data$coord %in% c("x1 x2", "x1 x3", "x2 x3"))
true_var[sel_2int] = 1
en3_signal_varsel[i, ] = ifelse(fit3$theta_step$theta.new[c(1:p_sig, sel_2int)] > 0, 1, 0)
en3_true = ifelse(fit3$theta_step$theta.new > 0, 1, 0)
en3_varsel[i] = sum(en3_true)
en3_tp[i] = metric(true_var, en3_true)$tp
en3_fp[i] = metric(true_var, en3_true)$fp
en3_pre[i] = metric(true_var, en3_true)$precision
en3_rec[i] = metric(true_var, en3_true)$recall
en3_f1[i] = metric(true_var, en3_true)$f1_score
en3_pred = cossonet.predict(fit3, te_x)
# en3_miss[i] = mean(te_y != ifelse(en3_pred$mu.new < 0.5, 0, 1))
en3_miss[i] = mean((te_y - en3_pred$f.new)^2)
# en3_miss[i] = mean(-poisson()$dev.resids(te_y, en3_pred$mu.new, rep(1, te_n)))
en3_time[i] = mean(t1)
# plot(en3_pred$mu.new)
}
t2 = system.time({
fit10 = try(cossonet(tr_x, tr_y, family = 'poisson', gamma = 0.95, kernel = "spline",
effect = "interaction", scale = T,
lambda0 = lambda0_input,
lambda_theta = lambda_theta_input
), silent = TRUE)
})[3]
fit10$theta_step$theta.new[c(1:3, sel_2int)]
if(!(class(fit10) == 'try-error')){
d = length(fit10$theta_step$theta.new)
true_var = rep(0,  sum(sapply(fit10$data$coord, length)))
true_var[1:p_sig] = 1
sel_2int = which(fit10$data$coord %in% c("x1 x2", "x1 x3", "x2 x3"))
true_var[sel_2int] = 1
en1_signal_varsel[i, ] = ifelse(fit10$theta_step$theta.new[c(1:p_sig, sel_2int)] > 0, 1, 0)
en1_true = ifelse(fit10$theta_step$theta.new > 0, 1, 0)
en1_varsel[i] = sum(en1_true)
en1_tp[i] = metric(true_var, en1_true)$tp
en1_fp[i] = metric(true_var, en1_true)$fp
en1_pre[i] = metric(true_var, en1_true)$precision
en1_rec[i] = metric(true_var, en1_true)$recall
en1_f1[i] = metric(true_var, en1_true)$f1_score
en1_pred = cossonet.predict(fit10, te_x)
# en1_miss[i] = mean(te_y != ifelse(en1_pred$mu.new < 0.5, 0, 1))
en1_miss[i] = mean((te_y - en1_pred$f.new)^2)
# en1_miss[i] = mean(-poisson()$dev.resids(te_y, en1_pred$mu.new, rep(1, te_n)))
en1_time[i] = mean(t2)
}
}
en1_signal_varsel
en1_fp
mean(en1_f1)
