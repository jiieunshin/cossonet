# en3_miss[i] = mean((te_y - en3_pred$f.new)^2)
en3_miss[i] = mean((te_y != ifelse(en3_pred$mu.new < 0.5, 0, 1)))
}
if(!(class(fit10) == 'try-error')){
time10[i] = t2
en1_varsel[i,] = ifelse(fit10$theta_step$theta.new > 0, 1, 0)
en1_nsel[i] = sum(en1_varsel[i,])
en1_pred = predict.cdcosso(fit10, te_x)
# en1_miss[i] = cosso::PartialLik(fit10$data$time, fit10$data$status, fit10$data$RS, fit10$c_step$f.new)
# en1_miss[i] = mean((te_y - en1_pred$f.new)^2)
en1_miss[i] = mean((te_y != ifelse(en1_pred$mu.new < 0.5, 0, 1)))
# print(en1_pred$mu.new)
}
# if(i == iter){
print(Sys.time())
cat("\n n :", nrow(tr_x), ", p = ", ncol(tr_x), "-------------------------- \n")
cat("\n iteration :", i, "\n")
cat('(gamma=0.7) \n')
cat("length :", sum(!is.na(en3_miss)), "\n")
cat('sel_Var:', round(mean(en3_nsel, na.rm = TRUE), 4), "(", round(sd(en3_nsel, na.rm = TRUE)/sqrt(sum(!is.na(en3_nsel))), 4), ")", "\n")
cat('miss   :', round(mean(en3_miss, na.rm = TRUE), 4), "(", round(sd(en3_miss, na.rm = TRUE)/sqrt(sum(!is.na(en3_miss))), 4), ")", "\n")
cat('time   :', round(mean(time3, na.rm = TRUE), 4), "(", round(sd(time3, na.rm = TRUE)/sqrt(sum(!is.na(time3))), 4), ")", "\n")
cat('(gamma=1) \n')
cat("length :", sum(!is.na(en1_miss)), "\n")
cat('sel_Var:', round(mean(en1_nsel, na.rm = TRUE), 4), "(", round(sd(en1_nsel, na.rm = TRUE)/sqrt(sum(!is.na(en1_nsel))), 4), ")", "\n")
cat('miss   :', round(mean(en1_miss, na.rm = TRUE), 4), "(", round(sd(en1_miss, na.rm = TRUE)/sqrt(sum(!is.na(en1_miss))), 4), ")", "\n")
cat('time   :', round(mean(time10, na.rm = TRUE), 4), "(", round(sd(time10, na.rm = TRUE)/sqrt(sum(!is.na(time10))), 4), ")", "\n")
# }
}
time3 = time10 = c()
en3_varsel = en1_varsel = matrix(0, iter, ncol(X))
en3_nsel = en1_nsel = en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
# cat("----------------- \n")
for(i in 1:iter){
cat("\n iteration :", i, "\n")
set.seed(i)
# split_id = train_test_split(y, 0.3)
# tr_x = X[split_id$train_id,]
# tr_y = y[split_id$train_id]
#
# te_x = X[split_id$test_id,]
# te_y = y[split_id$test_id]
n = nrow(X)
trainID = sample(1:n, size = floor(n * 0.7))
testID = (1:n)[-trainID]
tr_x = X[trainID, ]
tr_y = y[trainID]
te_x = X[testID, ]
te_y = y[testID]
t1 = system.time({
fit3 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 1, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{-4}), log(2^{-2}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-7}), log(2^{-5}), length.out = 20))
), silent = TRUE)
})[3]  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
t2 = system.time({
fit10 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.95, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{-4}), log(2^{-2}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-7}), log(2^{-5}), length.out = 20))
), silent = TRUE)
})[3]  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
if(!(class(fit3) == 'try-error')){
time3[i] = t1
en3_varsel[i,] = ifelse(fit3$theta_step$theta.new > 0, 1, 0)
en3_nsel[i] = sum(en3_varsel[i,])
en3_pred = predict.cdcosso(fit3, te_x)
# en3_miss[i] = cosso::PartialLik(fit3$data$time, fit3$data$status, fit3$data$RS, fit3$c_step$f.new)
# en3_miss[i] = mean((te_y - en3_pred$f.new)^2)
en3_miss[i] = mean((te_y != ifelse(en3_pred$mu.new < 0.5, 0, 1)))
}
if(!(class(fit10) == 'try-error')){
time10[i] = t2
en1_varsel[i,] = ifelse(fit10$theta_step$theta.new > 0, 1, 0)
en1_nsel[i] = sum(en1_varsel[i,])
en1_pred = predict.cdcosso(fit10, te_x)
# en1_miss[i] = cosso::PartialLik(fit10$data$time, fit10$data$status, fit10$data$RS, fit10$c_step$f.new)
# en1_miss[i] = mean((te_y - en1_pred$f.new)^2)
en1_miss[i] = mean((te_y != ifelse(en1_pred$mu.new < 0.5, 0, 1)))
# print(en1_pred$mu.new)
}
# if(i == iter){
print(Sys.time())
cat("\n n :", nrow(tr_x), ", p = ", ncol(tr_x), "-------------------------- \n")
cat("\n iteration :", i, "\n")
cat('(gamma=0.7) \n')
cat("length :", sum(!is.na(en3_miss)), "\n")
cat('sel_Var:', round(mean(en3_nsel, na.rm = TRUE), 4), "(", round(sd(en3_nsel, na.rm = TRUE)/sqrt(sum(!is.na(en3_nsel))), 4), ")", "\n")
cat('miss   :', round(mean(en3_miss, na.rm = TRUE), 4), "(", round(sd(en3_miss, na.rm = TRUE)/sqrt(sum(!is.na(en3_miss))), 4), ")", "\n")
cat('time   :', round(mean(time3, na.rm = TRUE), 4), "(", round(sd(time3, na.rm = TRUE)/sqrt(sum(!is.na(time3))), 4), ")", "\n")
cat('(gamma=1) \n')
cat("length :", sum(!is.na(en1_miss)), "\n")
cat('sel_Var:', round(mean(en1_nsel, na.rm = TRUE), 4), "(", round(sd(en1_nsel, na.rm = TRUE)/sqrt(sum(!is.na(en1_nsel))), 4), ")", "\n")
cat('miss   :', round(mean(en1_miss, na.rm = TRUE), 4), "(", round(sd(en1_miss, na.rm = TRUE)/sqrt(sum(!is.na(en1_miss))), 4), ")", "\n")
cat('time   :', round(mean(time10, na.rm = TRUE), 4), "(", round(sd(time10, na.rm = TRUE)/sqrt(sum(!is.na(time10))), 4), ")", "\n")
# }
}
fit10 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.95, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{-2}), log(2^{-1}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-7}), log(2^{-5}), length.out = 20))
), silent = TRUE)
fit10
time3 = time10 = c()
en3_varsel = en1_varsel = matrix(0, iter, ncol(X))
en3_nsel = en1_nsel = en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
# cat("----------------- \n")
for(i in 1:iter){
cat("\n iteration :", i, "\n")
set.seed(i)
# split_id = train_test_split(y, 0.3)
# tr_x = X[split_id$train_id,]
# tr_y = y[split_id$train_id]
#
# te_x = X[split_id$test_id,]
# te_y = y[split_id$test_id]
n = nrow(X)
trainID = sample(1:n, size = floor(n * 0.7))
testID = (1:n)[-trainID]
tr_x = X[trainID, ]
tr_y = y[trainID]
te_x = X[testID, ]
te_y = y[testID]
t1 = system.time({
fit3 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 1, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{-2}), log(2^{-1}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-8}), log(2^{-6}), length.out = 20))
), silent = TRUE)
})[3]  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
t2 = system.time({
fit10 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.95, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{-2}), log(2^{-1}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-8}), log(2^{-6}), length.out = 20))
), silent = TRUE)
})[3]  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
if(!(class(fit3) == 'try-error')){
time3[i] = t1
en3_varsel[i,] = ifelse(fit3$theta_step$theta.new > 0, 1, 0)
en3_nsel[i] = sum(en3_varsel[i,])
en3_pred = predict.cdcosso(fit3, te_x)
# en3_miss[i] = cosso::PartialLik(fit3$data$time, fit3$data$status, fit3$data$RS, fit3$c_step$f.new)
# en3_miss[i] = mean((te_y - en3_pred$f.new)^2)
en3_miss[i] = mean((te_y != ifelse(en3_pred$mu.new < 0.5, 0, 1)))
}
if(!(class(fit10) == 'try-error')){
time10[i] = t2
en1_varsel[i,] = ifelse(fit10$theta_step$theta.new > 0, 1, 0)
en1_nsel[i] = sum(en1_varsel[i,])
en1_pred = predict.cdcosso(fit10, te_x)
# en1_miss[i] = cosso::PartialLik(fit10$data$time, fit10$data$status, fit10$data$RS, fit10$c_step$f.new)
# en1_miss[i] = mean((te_y - en1_pred$f.new)^2)
en1_miss[i] = mean((te_y != ifelse(en1_pred$mu.new < 0.5, 0, 1)))
# print(en1_pred$mu.new)
}
# if(i == iter){
print(Sys.time())
cat("\n n :", nrow(tr_x), ", p = ", ncol(tr_x), "-------------------------- \n")
cat("\n iteration :", i, "\n")
cat('(gamma=0.7) \n')
cat("length :", sum(!is.na(en3_miss)), "\n")
cat('sel_Var:', round(mean(en3_nsel, na.rm = TRUE), 4), "(", round(sd(en3_nsel, na.rm = TRUE)/sqrt(sum(!is.na(en3_nsel))), 4), ")", "\n")
cat('miss   :', round(mean(en3_miss, na.rm = TRUE), 4), "(", round(sd(en3_miss, na.rm = TRUE)/sqrt(sum(!is.na(en3_miss))), 4), ")", "\n")
cat('time   :', round(mean(time3, na.rm = TRUE), 4), "(", round(sd(time3, na.rm = TRUE)/sqrt(sum(!is.na(time3))), 4), ")", "\n")
cat('(gamma=1) \n')
cat("length :", sum(!is.na(en1_miss)), "\n")
cat('sel_Var:', round(mean(en1_nsel, na.rm = TRUE), 4), "(", round(sd(en1_nsel, na.rm = TRUE)/sqrt(sum(!is.na(en1_nsel))), 4), ")", "\n")
cat('miss   :', round(mean(en1_miss, na.rm = TRUE), 4), "(", round(sd(en1_miss, na.rm = TRUE)/sqrt(sum(!is.na(en1_miss))), 4), ")", "\n")
cat('time   :', round(mean(time10, na.rm = TRUE), 4), "(", round(sd(time10, na.rm = TRUE)/sqrt(sum(!is.na(time10))), 4), ")", "\n")
# }
}
# heart disease 데이터 정리
data <- read.table("C:/Users/jieun/Dropbox/저장용/heart+disease/processed.cleveland.data", sep = ",")
colnames(data) = c("age", "sex", "cp", "trestbps", "chol", "fbs", "restecg", "thalach", "exang", "oldpeak", "slope", "ca", "thal", "num")
data[data == "?"] <- NA
data <- na.omit(data)
data$restecg
data$ca <- as.numeric(data$ca)
data$thal <- as.numeric(data$thal)
yid = which(colnames(data) == "num")
X = data[,-yid]
y = ifelse(data[,yid] == 0, 0, 1)
dim(data)
iter = 100
time3 = time10 = c()
en3_varsel = en1_varsel = matrix(0, iter, ncol(X))
en3_nsel = en1_nsel = en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
# cat("----------------- \n")
for(i in 1:iter){
cat("\n iteration :", i, "\n")
set.seed(i)
# split_id = train_test_split(y, 0.3)
# tr_x = X[split_id$train_id,]
# tr_y = y[split_id$train_id]
#
# te_x = X[split_id$test_id,]
# te_y = y[split_id$test_id]
n = nrow(X)
trainID = sample(1:n, size = floor(n * 0.7))
testID = (1:n)[-trainID]
tr_x = X[trainID, ]
tr_y = y[trainID]
te_x = X[testID, ]
te_y = y[testID]
t1 = system.time({
fit3 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 1, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{-2}), log(2^{-1}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-8}), log(2^{-6}), length.out = 20))
), silent = TRUE)
})[3]  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
t2 = system.time({
fit10 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.95, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{-2}), log(2^{-1}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-8}), log(2^{-6}), length.out = 20))
), silent = TRUE)
})[3]  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
if(!(class(fit3) == 'try-error')){
time3[i] = t1
en3_varsel[i,] = ifelse(fit3$theta_step$theta.new > 0, 1, 0)
en3_nsel[i] = sum(en3_varsel[i,])
en3_pred = predict.cdcosso(fit3, te_x)
# en3_miss[i] = cosso::PartialLik(fit3$data$time, fit3$data$status, fit3$data$RS, fit3$c_step$f.new)
# en3_miss[i] = mean((te_y - en3_pred$f.new)^2)
en3_miss[i] = mean((te_y != ifelse(en3_pred$mu.new < 0.5, 0, 1)))
}
if(!(class(fit10) == 'try-error')){
time10[i] = t2
en1_varsel[i,] = ifelse(fit10$theta_step$theta.new > 0, 1, 0)
en1_nsel[i] = sum(en1_varsel[i,])
en1_pred = predict.cdcosso(fit10, te_x)
# en1_miss[i] = cosso::PartialLik(fit10$data$time, fit10$data$status, fit10$data$RS, fit10$c_step$f.new)
# en1_miss[i] = mean((te_y - en1_pred$f.new)^2)
en1_miss[i] = mean((te_y != ifelse(en1_pred$mu.new < 0.5, 0, 1)))
# print(en1_pred$mu.new)
}
# if(i == iter){
print(Sys.time())
cat("\n n :", nrow(tr_x), ", p = ", ncol(tr_x), "-------------------------- \n")
cat("\n iteration :", i, "\n")
cat('(gamma=0.7) \n')
cat("length :", sum(!is.na(en3_miss)), "\n")
cat('sel_Var:', round(mean(en3_nsel, na.rm = TRUE), 4), "(", round(sd(en3_nsel, na.rm = TRUE)/sqrt(sum(!is.na(en3_nsel))), 4), ")", "\n")
cat('miss   :', round(mean(en3_miss, na.rm = TRUE), 4), "(", round(sd(en3_miss, na.rm = TRUE)/sqrt(sum(!is.na(en3_miss))), 4), ")", "\n")
cat('time   :', round(mean(time3, na.rm = TRUE), 4), "(", round(sd(time3, na.rm = TRUE)/sqrt(sum(!is.na(time3))), 4), ")", "\n")
cat('(gamma=1) \n')
cat("length :", sum(!is.na(en1_miss)), "\n")
cat('sel_Var:', round(mean(en1_nsel, na.rm = TRUE), 4), "(", round(sd(en1_nsel, na.rm = TRUE)/sqrt(sum(!is.na(en1_nsel))), 4), ")", "\n")
cat('miss   :', round(mean(en1_miss, na.rm = TRUE), 4), "(", round(sd(en1_miss, na.rm = TRUE)/sqrt(sum(!is.na(en1_miss))), 4), ")", "\n")
cat('time   :', round(mean(time10, na.rm = TRUE), 4), "(", round(sd(time10, na.rm = TRUE)/sqrt(sum(!is.na(time10))), 4), ")", "\n")
# }
}
fit10 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.95, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{-4}), log(2^{0}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-10}), log(2^{-5}), length.out = 20))
), silent = TRUE)
fit10
iter = 100
time3 = time10 = c()
en3_varsel = en1_varsel = matrix(0, iter, ncol(X))
en3_nsel = en1_nsel = en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
# cat("----------------- \n")
for(i in 1:iter){
cat("\n iteration :", i, "\n")
set.seed(i)
# split_id = train_test_split(y, 0.3)
# tr_x = X[split_id$train_id,]
# tr_y = y[split_id$train_id]
#
# te_x = X[split_id$test_id,]
# te_y = y[split_id$test_id]
n = nrow(X)
trainID = sample(1:n, size = floor(n * 0.7))
testID = (1:n)[-trainID]
tr_x = X[trainID, ]
tr_y = y[trainID]
te_x = X[testID, ]
te_y = y[testID]
t1 = system.time({
fit3 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 1, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{-4}), log(2^{0}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-10}), log(2^{-5}), length.out = 20))
), silent = TRUE)
})[3]  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
t2 = system.time({
fit10 = try(cdcosso(tr_x, tr_y, family = 'binomial', gamma = 0.95, kernel = "spline", scale = T,
lambda0 = exp(seq(log(2^{-4}), log(2^{0}), length.out = 20)),
lambda_theta = exp(seq(log(2^{-10}), log(2^{-5}), length.out = 20))
), silent = TRUE)
})[3]  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
if(!(class(fit3) == 'try-error')){
time3[i] = t1
en3_varsel[i,] = ifelse(fit3$theta_step$theta.new > 0, 1, 0)
en3_nsel[i] = sum(en3_varsel[i,])
en3_pred = predict.cdcosso(fit3, te_x)
# en3_miss[i] = cosso::PartialLik(fit3$data$time, fit3$data$status, fit3$data$RS, fit3$c_step$f.new)
# en3_miss[i] = mean((te_y - en3_pred$f.new)^2)
en3_miss[i] = mean((te_y != ifelse(en3_pred$mu.new < 0.5, 0, 1)))
}
if(!(class(fit10) == 'try-error')){
time10[i] = t2
en1_varsel[i,] = ifelse(fit10$theta_step$theta.new > 0, 1, 0)
en1_nsel[i] = sum(en1_varsel[i,])
en1_pred = predict.cdcosso(fit10, te_x)
# en1_miss[i] = cosso::PartialLik(fit10$data$time, fit10$data$status, fit10$data$RS, fit10$c_step$f.new)
# en1_miss[i] = mean((te_y - en1_pred$f.new)^2)
en1_miss[i] = mean((te_y != ifelse(en1_pred$mu.new < 0.5, 0, 1)))
# print(en1_pred$mu.new)
}
# if(i == iter){
print(Sys.time())
cat("\n n :", nrow(tr_x), ", p = ", ncol(tr_x), "-------------------------- \n")
cat("\n iteration :", i, "\n")
cat('(gamma=0.7) \n')
cat("length :", sum(!is.na(en3_miss)), "\n")
cat('sel_Var:', round(mean(en3_nsel, na.rm = TRUE), 4), "(", round(sd(en3_nsel, na.rm = TRUE)/sqrt(sum(!is.na(en3_nsel))), 4), ")", "\n")
cat('miss   :', round(mean(en3_miss, na.rm = TRUE), 4), "(", round(sd(en3_miss, na.rm = TRUE)/sqrt(sum(!is.na(en3_miss))), 4), ")", "\n")
cat('time   :', round(mean(time3, na.rm = TRUE), 4), "(", round(sd(time3, na.rm = TRUE)/sqrt(sum(!is.na(time3))), 4), ")", "\n")
cat('(gamma=1) \n')
cat("length :", sum(!is.na(en1_miss)), "\n")
cat('sel_Var:', round(mean(en1_nsel, na.rm = TRUE), 4), "(", round(sd(en1_nsel, na.rm = TRUE)/sqrt(sum(!is.na(en1_nsel))), 4), ")", "\n")
cat('miss   :', round(mean(en1_miss, na.rm = TRUE), 4), "(", round(sd(en1_miss, na.rm = TRUE)/sqrt(sum(!is.na(en1_miss))), 4), ")", "\n")
cat('time   :', round(mean(time10, na.rm = TRUE), 4), "(", round(sd(time10, na.rm = TRUE)/sqrt(sum(!is.na(time10))), 4), ")", "\n")
# }
}
dim(tr_x)
dim(te_x)
colMeans(en1_varsel)
colMeans(en3_varsel)
# install.packages("remotes")
remotes::install_github("rjournal/rjtools")
library(rjtools)
create_article(name = "cossonet")
rmarkdown::render("cossonet.End")
rmarkdown::render("cossonet.Rnd")
rmarkdown::render("cossonet.Rmd")
install.packages(htmltools)
install.packages("htmltools")
install.packages("htmltools")
rmarkdown::render("cossonet.Rmd")
remove.packages("cdcosso")
devtools::install_github("jiieunshin/cossonet")
library(cossonet)
library(cdcosso)
library(tmvtnorm)
library(glmnet)
library(cosso)
library(MASS)
n = 200
te_n = 1000
p_sig = 4
p = 20
out = matrix(0, 24, 13)
colnames(out) = c("n", "p", "gamma", "tp", "tp_se", "fp", "fp_se", "f1", "f1_se", "miss", "miss_se", "time", "time_se")
out = data.frame(out)
i=1
ll = 0
lambda0_input = exp(seq(log(2^{-5}), log(2^{0}), length.out = 20))
lambda_theta_input = exp(seq(log(2^{-10}), log(2^{-5}), length.out = 20))
tr = data_generation(n, p, SNR = 8, response = "regression")
tr_x = tr$x
tr_y = tr$y
te = data_generation(te_n, p, SNR = 8, response = "regression")
te_x = te$x
te_y = te$y
t2 = system.time({
fit10 = try(cdcosso(tr_x, tr_y, tr$f, cv = "gcv", family = 'gaussian', gamma = 0.95, kernel = "spline", scale = T,
lambda0 = lambda0_input,
lambda_theta = lambda_theta_input
), silent = TRUE)
})[3]  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
fit10
fit10 = try(cdcosso(tr_x, tr_y, cv = "gcv", family = 'gaussian', gamma = 0.95, kernel = "spline", scale = T,
lambda0 = lambda0_input,
lambda_theta = lambda_theta_input
), silent = TRUE)
cdcosso
remove.packages("cdcosso")
devtools::install_github("jiieunshin/cossonet")
library(cdcosso)
library(tmvtnorm)
library(glmnet)
library(cosso)
library(MASS)
n = 100
te_n = 1000
p_sig = 4
p = 160
out = matrix(0, 24, 13)
colnames(out) = c("n", "p", "method", "tp", "tp_se", "fp", "fp_se", "f1", "f1_se", "miss", "miss_se", "time", "time_se")
out = data.frame(out)
i=1
ll = 0
lambda0_input = exp(seq(log(2^{-5}), log(2^{-2}), length.out = 20))
lambda_theta_input = exp(seq(log(2^{-12}), log(2^{-10}), length.out = 20))
# for(nb in c(12, 25, 50, 100)){
iter = 100
ll = ll + 1
en3_signal_varsel = en1_signal_varsel = matrix(0, iter, p_sig)
time3 = time10 = c()
en3_varsel = en1_varsel = c()
en3_tp = en3_fp = en1_tp = en1_fp = en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
# cat("\n iteration :", i, "\n")
set.seed(i)
tr = data_generation(n, p, SNR = 8, response = "survival")
tr_x = tr$x
tr_y = tr$y
fit3 = try(cdcosso(tr_x, tr_y, family = 'Cox', cv = "GCV", gamma = 1, kernel = "spline", scale = T,
lambda0 = lambda0_input,
lambda_theta = lambda_theta_input
), silent = TRUE)
library(cossonet)
devtools::install_github("jiieunshin/cossonet")
devtools::install_github("jiieunshin/cossonet")
library(cossonet)
library(tmvtnorm)
library(glmnet)
devtools::install_github("jiieunshin/cossonet", force = TRUE)
remove.packages("cdcosso")
devtools::install_github("jiieunshin/cossonet")
library(cossonet)
library(tmvtnorm)
library(glmnet)
library(cosso)
library(MASS)
n = 100
te_n = 1000
p_sig = 4
p = 160
out = matrix(0, 24, 13)
colnames(out) = c("n", "p", "method", "tp", "tp_se", "fp", "fp_se", "f1", "f1_se", "miss", "miss_se", "time", "time_se")
out = data.frame(out)
i=1
ll = 0
lambda0_input = exp(seq(log(2^{-5}), log(2^{-2}), length.out = 20))
lambda_theta_input = exp(seq(log(2^{-12}), log(2^{-10}), length.out = 20))
iter = 100
ll = ll + 1
en3_signal_varsel = en1_signal_varsel = matrix(0, iter, p_sig)
time3 = time10 = c()
en3_varsel = en1_varsel = c()
en3_tp = en3_fp = en1_tp = en1_fp = en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
tr = data_generation(n, p, SNR = 8, response = "survival")
tr_x = tr$x
tr_y = tr$y
te = data_generation(te_n, p, SNR = 8, response = "survival")
te_x = te$x
te_y = te$y
# mean(tr_y[,"status"])
t1 = system.time({
fit3 = try(cdcosso(tr_x, tr_y, family = 'Cox', cv = "GCV", gamma = 1, kernel = "spline", scale = T,
lambda0 = lambda0_input,
lambda_theta = lambda_theta_input
), silent = TRUE)
})[3]  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
fit3
fit3 = try(cossonet(tr_x, tr_y, family = 'Cox', cv = "GCV", gamma = 1, kernel = "spline", scale = T,
lambda0 = lambda0_input,
lambda_theta = lambda_theta_input
), silent = TRUE)
fit3
remove.packages("cossonet")
devtools::install_github("jiieunshin/cossonet")
library(cossonet)
library(tmvtnorm)
library(glmnet)
library(cosso)
library(MASS)
n = 100
te_n = 1000
p_sig = 4
p = 160
out = matrix(0, 24, 13)
colnames(out) = c("n", "p", "method", "tp", "tp_se", "fp", "fp_se", "f1", "f1_se", "miss", "miss_se", "time", "time_se")
out = data.frame(out)
i=1
ll = 0
lambda0_input = exp(seq(log(2^{-5}), log(2^{5}), length.out = 20))
lambda_theta_input = exp(seq(log(2^{-5}), log(2^{5}), length.out = 20))
# for(nb in c(12, 25, 50, 100)){
iter = 100
ll = ll + 1
en3_signal_varsel = en1_signal_varsel = matrix(0, iter, p_sig)
time3 = time10 = c()
en3_varsel = en1_varsel = c()
en3_tp = en3_fp = en1_tp = en1_fp = en3_f1 = en1_f1 = en3_rec = en1_rec = en3_pre = en1_pre = c()
en3_miss = en1_miss = c()
en3_time = en1_time = c()
# cat("\n iteration :", i, "\n")
set.seed(i)
tr = data_generation(n, p, SNR = 8, response = "survival")
tr_x = tr$x
tr_y = tr$y
te = data_generation(te_n, p, SNR = 8, response = "survival")
te_x = te$x
te_y = te$y
# mean(tr_y[,"status"])
t1 = system.time({
fit3 = try(cossonet(tr_x, tr_y, family = 'Cox', cv = "GCV", gamma = 1, kernel = "spline", scale = T,
lambda0 = lambda0_input,
lambda_theta = lambda_theta_input
), silent = TRUE)
})[3]  # lambda2를 크게 할수록  sparse, gamma를 크게 할수록 sparse
fit3
